import streamlit as st
from handlers import *
from loading import *
from ml_layer import *

def show_incorrect_policies(models, hierarchy):
    
    st.title("Incorrect Policies")
    
    inc_policy = st.text_input(
        label="Incorrectly generated policy",
        value=get_inc_nlacp(),
        disabled=True,
        help="Natural Language Access Control Policies corresponding to incorrect access control policies generated by AGentV.",
        key="inc_policy_out",
    )
    _, pcl, ncl, _ = st.columns([5, 2, 2, 5])
    prev_button = pcl.button(
        label="Previous",
        key="inc_prev",
        on_click=inc_policy_nav_prev,
        disabled=st.session_state.inc_count <= 0,
        use_container_width=True,
    )
    next_button = ncl.button(
        label="Next",
        key="inc_next",
        on_click=inc_policy_nav_next,
        disabled=st.session_state.inc_count == len(st.session_state.inc_policies) - 1,
        use_container_width=True,
    )

    with st.container(border=False, height=340):
        if (len(st.session_state.inc_policies)>0):
            cur_inc_policy = st.session_state.inc_policies[st.session_state.inc_count]
            if cur_inc_policy["solved"] == True:
                st.success("The policy is corrected and submitted sucessfully!", icon="âœ…")
            else:
                st.error(cur_inc_policy["warning"], icon="ðŸš¨")
            
            df = load_policy(get_inc_policy())
            df.insert(0, 'id', [i+1 for i in range(len(df))])
            edited_df = st.data_editor(
                df,
                use_container_width=True,
                num_rows="dynamic",
                key="corrected_policy",
                column_config={
                    "decision": st.column_config.SelectboxColumn(
                        "decision",
                        help="The access control rule decision",
                        width="small",
                        options=[
                            "allow",
                            "deny",
                        ],
                        required=True,
                    )
                },
            )

    submit = st.button(
        label="Submit", type="primary", use_container_width=True, key="submit_btn", disabled=len(st.session_state.inc_policies)<1
    )
    if submit:
        edited_df = edited_df.drop('id', axis='columns')
        corrected_policy = [v for _, v in edited_df.to_dict("index").items()]
        policy = align_policy(corrected_policy, models.vectorestores, hierarchy)
        json_policy = JSONPolicyRecord.from_dict({
            'policyId': str(uuid4()),
            'policyDescription': st.session_state.inc_policy_out,
            'policy': policy
        })
        
        st.session_state.corrected_policies.append(
            json_policy
        )
        
        # st.session_state['policy_create_status'] = ac_engine.create_policy(json_policy)
        st.session_state.inc_policies[st.session_state.inc_count]['policy'] = ast.literal_eval(edited_df.to_json(orient='records'))
        
        st.session_state.inc_policies[st.session_state.inc_count]['solved'] = True
        
        handlers.cor_policy_nav_last()
        st.rerun()
        
hierarchy = st.session_state.hierarchies
models = st.session_state.models

show_incorrect_policies(models, hierarchy)